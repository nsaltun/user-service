// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/nsaltun/userapi/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserService) CreateUser(ctx context.Context, user *model.User) (*model.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) (*model.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) *model.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserById provides a mock function with given fields: ctx, id
func (_m *UserService) DeleteUserById(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListUsers provides a mock function with given fields: ctx, userFilter, limit, offset
func (_m *UserService) ListUsers(ctx context.Context, userFilter model.UserFilter, limit int, offset int) (*model.Pagination, error) {
	ret := _m.Called(ctx, userFilter, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *model.Pagination
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserFilter, int, int) (*model.Pagination, error)); ok {
		return rf(ctx, userFilter, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserFilter, int, int) *model.Pagination); ok {
		r0 = rf(ctx, userFilter, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pagination)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserFilter, int, int) error); ok {
		r1 = rf(ctx, userFilter, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserById provides a mock function with given fields: ctx, id, user
func (_m *UserService) UpdateUserById(ctx context.Context, id string, user model.User) (*model.User, error) {
	ret := _m.Called(ctx, id, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserById")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.User) (*model.User, error)); ok {
		return rf(ctx, id, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.User) *model.User); ok {
		r0 = rf(ctx, id, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.User) error); ok {
		r1 = rf(ctx, id, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
