// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	errwrap "github.com/nsaltun/userapi/pkg/lib/errwrap"
	mock "github.com/stretchr/testify/mock"
)

// IError is an autogenerated mock type for the IError type
type IError struct {
	mock.Mock
}

// Error provides a mock function with given fields:
func (_m *IError) Error() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ErrorResp provides a mock function with given fields:
func (_m *IError) ErrorResp() errwrap.ErrorResponse {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ErrorResp")
	}

	var r0 errwrap.ErrorResponse
	if rf, ok := ret.Get(0).(func() errwrap.ErrorResponse); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(errwrap.ErrorResponse)
	}

	return r0
}

// HttpCode provides a mock function with given fields:
func (_m *IError) HttpCode() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HttpCode")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// OriginErr provides a mock function with given fields:
func (_m *IError) OriginErr() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OriginErr")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetHttpCode provides a mock function with given fields: code
func (_m *IError) SetHttpCode(code int) errwrap.IError {
	ret := _m.Called(code)

	if len(ret) == 0 {
		panic("no return value specified for SetHttpCode")
	}

	var r0 errwrap.IError
	if rf, ok := ret.Get(0).(func(int) errwrap.IError); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errwrap.IError)
		}
	}

	return r0
}

// SetMessage provides a mock function with given fields: msg
func (_m *IError) SetMessage(msg string) errwrap.IError {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for SetMessage")
	}

	var r0 errwrap.IError
	if rf, ok := ret.Get(0).(func(string) errwrap.IError); ok {
		r0 = rf(msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errwrap.IError)
		}
	}

	return r0
}

// SetOriginError provides a mock function with given fields: err
func (_m *IError) SetOriginError(err error) errwrap.IError {
	ret := _m.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for SetOriginError")
	}

	var r0 errwrap.IError
	if rf, ok := ret.Get(0).(func(error) errwrap.IError); ok {
		r0 = rf(err)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errwrap.IError)
		}
	}

	return r0
}

// NewIError creates a new instance of IError. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIError(t interface {
	mock.TestingT
	Cleanup(func())
}) *IError {
	mock := &IError{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
