// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mongohandler "github.com/nsaltun/userapi/pkg/lib/db/mongohandler"
	mock "github.com/stretchr/testify/mock"
)

// MongoDBWrapper is an autogenerated mock type for the MongoDBWrapper type
type MongoDBWrapper struct {
	mock.Mock
}

// Collection provides a mock function with given fields: name
func (_m *MongoDBWrapper) Collection(name string) mongohandler.Collection {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Collection")
	}

	var r0 mongohandler.Collection
	if rf, ok := ret.Get(0).(func(string) mongohandler.Collection); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongohandler.Collection)
		}
	}

	return r0
}

// Disconnect provides a mock function with given fields:
func (_m *MongoDBWrapper) Disconnect() {
	_m.Called()
}

// HealthCheck provides a mock function with given fields: ctx
func (_m *MongoDBWrapper) HealthCheck(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMongoDBWrapper creates a new instance of MongoDBWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMongoDBWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MongoDBWrapper {
	mock := &MongoDBWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
