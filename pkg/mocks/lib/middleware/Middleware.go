// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	middleware "github.com/nsaltun/userapi/pkg/lib/middleware"
	mock "github.com/stretchr/testify/mock"
)

// Middleware is an autogenerated mock type for the Middleware type
type Middleware struct {
	mock.Mock
}

// Execute provides a mock function with given fields: next
func (_m *Middleware) Execute(next middleware.CustomHandler) middleware.CustomHandler {
	ret := _m.Called(next)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 middleware.CustomHandler
	if rf, ok := ret.Get(0).(func(middleware.CustomHandler) middleware.CustomHandler); ok {
		r0 = rf(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.CustomHandler)
		}
	}

	return r0
}

// NewMiddleware creates a new instance of Middleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *Middleware {
	mock := &Middleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
